# Rust
/target/
**/*.rs.bk
*.pdb

# Generated by Cargo
# will have compiled files and executables
debug/
target/

# Remove Cargo.lock from gitignore if creating an executable, leave it for libraries
# More information here https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html
# Cargo.lock

# These are backup files generated by rustfmt
**/*.rs.bk

# MSVC Windows builds of rustc generate these, which store debugging information
*.pdb

# Build artifacts and distribution
/dist/
*.exe
*.dll
*.so
*.dylib

# IDE and Editor files
.vscode/
.idea/
*.swp
*.swo
*~
.DS_Store
Thumbs.db

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Logs
*.log
logs/

# Environment variables
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Node.js (for any web development dependencies)
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.npm
.yarn-integrity

# Web build artifacts (if serving built web apps)
build/
dist/
out/
.next/
.nuxt/
.cache/
.parcel-cache

# Coverage reports
coverage/
*.lcov

# Testing
.nyc_output

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Temporary folders
tmp/
temp/

# Runtime configuration files (keep example configs)
config.toml
config.json
*.local.toml
*.local.json

# Local test files (keep example test files in repo)
local_test/
test_files/
sample_files/

# Backup files
*.bak
*.backup
*.old

# Certificate files (if any SSL certs are used)
*.pem
*.key
*.crt
*.cert

# Documentation build
book/
docs/_build/

# JetBrains IDEs
.idea/
*.iml
*.ipr
*.iws

# Visual Studio Code (keep some config, ignore others)
.vscode/
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json

# Vim
*.swp
*.swo

# Emacs
*~
\#*\#
/.emacs.desktop
/.emacs.desktop.lock
*.elc
auto-save-list
tramp
.\#*
